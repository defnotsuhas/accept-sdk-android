buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
    }
}

apply plugin: 'com.android.library'

ext {
    PUBLISH_GROUP_ID = 'net.authorize'
    PUBLISH_ARTIFACT_ID = 'accept-android-sdk'
    PUBLISH_VERSION = '1.0.4'
    // COMMENT : If publish version changes change "version name" in "defaultconfig" below
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 4
        versionName "1.0.4"
        buildConfigField("String", "SDK_VERSION", "\"1.0.4\"")
    }
//  compileOptions {
//    sourceCompatibility JavaVersion.VERSION_1_7
//    targetCompatibility JavaVersion.VERSION_1_7
//  }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.core:core:1.3.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
}

def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDirectory.set(buildDir)
    archiveFileName.set("release-${version}.zip")
}

task generateRelease {
    doLast {
        println "Release ${version} can be found at ${localReleaseDest}/"
        println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
    }
}

generateRelease.dependsOn(androidJavadocsJar, androidSourcesJar, zipRelease)
